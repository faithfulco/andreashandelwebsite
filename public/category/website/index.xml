<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>website | Andreas Handel</title>
    <link>https://www.andreashandel.com/category/website/</link>
      <atom:link href="https://www.andreashandel.com/category/website/index.xml" rel="self" type="application/rss+xml" />
    <description>website</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>¬©  Andreas Handel, 2021</copyright><lastBuildDate>Sun, 21 Mar 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.andreashandel.com/media/logo_hu5aa01ef3f5a2b4ecf2f7517df7c485bf_90212_300x300_fit_lanczos_3.png</url>
      <title>website</title>
      <link>https://www.andreashandel.com/category/website/</link>
    </image>
    
    <item>
      <title>Create a GitHub website with distill in less than 30 minutes</title>
      <link>https://www.andreashandel.com/posts/distill-github-website/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://www.andreashandel.com/posts/distill-github-website/</guid>
      <description>&lt;p&gt;The following blog post provides step-by-step instructions for creating a website using R Markdown, the &lt;code&gt;distill&lt;/code&gt; R package and GitHub.&lt;/p&gt;
&lt;h1 id=&#34;motivation&#34;&gt;Motivation&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://rstudio.github.io/distill/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The &lt;code&gt;distill&lt;/code&gt; R package&lt;/a&gt; is a fairly new R package from the RStudio folks, it is under heavy development. One of its purposes is to create simple but still somewhat flexible websites. If you are trying your first website, or just need a fairly simple one that is quick to set up, this is a good place to start. To see a few examples of websites created with &lt;code&gt;distill&lt;/code&gt;, check out the cleverly named &lt;a href=&#34;https://jhelvy.github.io/distillery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the distillery website&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;required-skills&#34;&gt;Required skills&lt;/h1&gt;
&lt;p&gt;I assume that you have general computer literacy, but no experience with any of the tools that will be used. Also, no coding, web-development or related experience is expected.&lt;/p&gt;
&lt;h1 id=&#34;what-this-document-covers&#34;&gt;What this document covers&lt;/h1&gt;
&lt;p&gt;This document is meant to provide you with the minimum required instructions to get your own website up and running quickly. As such, instructions and background information are kept at a minimum. I used a &lt;em&gt;recipe-like&lt;/em&gt; approach by giving hopefully detailed and specific enough instructions to get things to work. I&amp;rsquo;m not covering any &lt;em&gt;why&lt;/em&gt; here or provide much further explanations. If you decide you like to use this setup for your website, you will likely want to go beyond this document and learn a bit more about the various tools involved in the process. To that end, links to further resources are provided.&lt;/p&gt;
&lt;h1 id=&#34;who-this-is-not-for&#34;&gt;Who this is (not) for&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;This way of making and hosting a website might be for you if:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are (or would like to be) an R, R Markdown and GitHub user. This is a method of creating a website using those tools which very efficiently fits into such a work flow.&lt;/li&gt;
&lt;li&gt;You want a way to host a website where all the content is fully controlled by you, and the website can be hosted without much resources (and for free).&lt;/li&gt;
&lt;li&gt;You want something that&amp;rsquo;s fairly simple and easy to set up and maintain, but still gives you some ability to configure things.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;This way of making and hosting a website might not be for you if:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your main work flow is MS Word, Powerpoint, etc. and you are not interested in R Markdown or GitHub.&lt;/li&gt;
&lt;li&gt;You want everything accessible through a graphical interface.&lt;/li&gt;
&lt;li&gt;You need a complex setup with lots of control over layout and many advanced features.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;related-content&#34;&gt;Related content&lt;/h1&gt;
&lt;p&gt;I previously posted tutorials describing two other ways of making a website using a similar set of tools.&lt;/p&gt;
&lt;p&gt;One rather simple way to set up a website is using R Markdown and Github without the &lt;code&gt;distill&lt;/code&gt; package, I described this approach &lt;a href=&#34;https://www.andreashandel.com/posts/github-website/&#34;&gt;in this blog post&lt;/a&gt;. That approach is rather similar to the one described here. The advantage of using &lt;code&gt;distill&lt;/code&gt; is that it&amp;rsquo;s likely going to see more development and will allow more configuration down the road.&lt;/p&gt;
&lt;p&gt;If you need the ability to do more customization, you can use the &lt;code&gt;blogdown&lt;/code&gt; R package and Hugo. I wrote a 2-series blog post with instructions for creating your own website using &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blogdown&lt;/a&gt;, &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt; and &lt;a href=&#34;https://www.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netlify&lt;/a&gt;. (Here are &lt;a href=&#34;https://www.andreashandel.com/posts/blogdown-website-1/&#34;&gt;Part 1&lt;/a&gt; and &lt;a href=&#34;https://www.andreashandel.com/posts/blogdown-website-2/&#34;&gt;part 2&lt;/a&gt;). While I&amp;rsquo;m using Hugo/blogdown for my &lt;a href=&#34;https://www.andreashandel.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;personal website&lt;/a&gt; I have been using a basic RMarkdown/Github setup for my online courses, such as &lt;a href=&#34;https://andreashandel.github.io/IDEMAcourse/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;quick-tool-overview&#34;&gt;Quick tool overview&lt;/h1&gt;
&lt;p&gt;The tools used here are fairly simple. &lt;code&gt;GitHub&lt;/code&gt; is used for hosting the website and &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;RStudio&lt;/code&gt;, together with some packages (most importantly the &lt;code&gt;distill&lt;/code&gt; package) are used to create the site.&lt;/p&gt;
&lt;h1 id=&#34;pre-requisites&#34;&gt;Pre-requisites&lt;/h1&gt;
&lt;p&gt;First, you need to install R and Rstudio and set up a GitHub account. (That does not count toward the 30 minutes of getting the website up and running üòÅ.)&lt;/p&gt;
&lt;h2 id=&#34;install-r-and-rstudio&#34;&gt;Install R and RStudio&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t already have it on your computer, &lt;a href=&#34;https://www.r-project.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;install R first&lt;/a&gt;. You can pick any mirror you like. If you already have R installed, make sure it is a fairly recent version. If yours is old, I suggest you install a new R version.&lt;/p&gt;
&lt;p&gt;Once you have R installed, install the free version of &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Desktop&lt;/a&gt;. Again, make sure it&amp;rsquo;s a recent version. If you have an older version, you should update.&lt;/p&gt;
&lt;p&gt;Installing R and RStudio should be fairly straightforward. If you want some more details or need instructions, see &lt;a href=&#34;https://andreashandel.GitHub.io/MADAcourse/RandRStudio.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this page&lt;/a&gt; (which is part of an online course I teach).&lt;/p&gt;
&lt;h2 id=&#34;get-github-up-and-running&#34;&gt;Get GitHub up and running&lt;/h2&gt;
&lt;p&gt;If you are new to GitHub, you need to create an account. At some point, it would also be useful to learn more about what Git/GitHub is and how to use it, but for this purpose you actually don&amp;rsquo;t need to know much. If you want to read a bit about Git/GitHub, see e.g. &lt;a href=&#34;https://andreashandel.github.io/MADAcourse/Github_Introduction.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this document, which I wrote for one of my courses.&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;install-gitkraken-optional-but-assumed&#34;&gt;Install Gitkraken (optional but assumed)&lt;/h2&gt;
&lt;p&gt;There are many ways you can interact with Git/GitHub. I mostly use the fairly user-friendly and full-featured &lt;a href=&#34;https://www.gitkraken.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gitkraken&lt;/a&gt;. You can get a basic version for free. If you are a student, you can get the Pro version through the &lt;a href=&#34;https://education.github.com/pack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github developer pack&lt;/a&gt;, teachers can get it through the &lt;a href=&#34;https://education.github.com/toolbox&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github teacher toolbox&lt;/a&gt;. If you qualify for either, I highly recommend signing up. But you don&amp;rsquo;t need it for our purpose.&lt;/p&gt;
&lt;p&gt;Once you have your GitHub account set up and Gitkraken installed, make sure you &lt;a href=&#34;https://www.gitkraken.com/resources/gitkraken-github-cheat-sheet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;connect Gitkraken to your Github account&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I assume for the rest of the post that you are using Gitkraken. If you have your own preferred Git/GitHub client (e.g. the one that comes with RStudio), you can of course use that one too.&lt;/p&gt;
&lt;h1 id=&#34;starting-your-website&#34;&gt;Starting your website&lt;/h1&gt;
&lt;p&gt;Ok, the 30 minute timer starts now üòÅ. With the above registration and installation bits out of the way, you can get started with your website. To do so, follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open RStudio.&lt;/li&gt;
&lt;li&gt;Install the distill package by typing &lt;code&gt;install.packages(&#39;distill&#39;)&lt;/code&gt; into the R console.&lt;/li&gt;
&lt;li&gt;Choose &lt;code&gt;File -&amp;gt; New Project -&amp;gt; New Directory&lt;/code&gt; and find the &lt;code&gt;Distill Website&lt;/code&gt; entry. If it&amp;rsquo;s not there, close and re-open RStudio and make sure the &lt;code&gt;distill&lt;/code&gt; package installed ok (e.g., by calling &lt;code&gt;library(distill)&lt;/code&gt; in the R console and making sure there is no error message).&lt;/li&gt;
&lt;li&gt;In the menu that opens, provide the name for your website project (this will also be the name of the URL on GitHub, so choose something informative). Decide where to locate it on your local drive. Don&amp;rsquo;t place it somewhere were it gets synced with e.g., Dropbox, OneDrive, Google Drive. This can mess with the GitHub work flow. Give it a title and check the &lt;code&gt;configure GitHub Pages&lt;/code&gt; box, as shown in the figure.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;setup.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;test-the-website&#34;&gt;Test the website&lt;/h1&gt;
&lt;p&gt;Once you created the project following the steps outlined above, RStudio should restart itself and you should see 3 files open in the RStudio file pane (top left) namely &lt;code&gt;index.Rmd&lt;/code&gt;, &lt;code&gt;about.Rmd&lt;/code&gt; and &lt;code&gt;_site.yml&lt;/code&gt;. In the top right pane, you should see a tab called &lt;code&gt;Build&lt;/code&gt;. Click on it, then click on the &lt;code&gt;Build Website&lt;/code&gt; hammer icon. Alternatively, you can type ``rmarkdown::render_site()` into the R console.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t find the &lt;code&gt;Build Website&lt;/code&gt; button or the &lt;code&gt;rmarkdown::render_site()&lt;/code&gt; command produced an error message, something went wrong with the setup. You can try to close RStudio, navigate to the folder for your website you just created and click on the &lt;code&gt;.Rproj&lt;/code&gt; file, which should open RStudio and place you in the project. Maybe the &lt;code&gt;Build&lt;/code&gt; tab and &lt;code&gt;Build Website&lt;/code&gt; buttons are now there? If not, revisit the steps above and make sure you did them all, especially make sure the 3 starter files are in the same folder.&lt;/p&gt;
&lt;p&gt;If things work, a preview window should open with the beginning of your new website. You&amp;rsquo;ll see a menu at the top, you can click on the links. Not much will happen just now, we&amp;rsquo;ll get to this.&lt;/p&gt;
&lt;h1 id=&#34;a-brief-explanation-of-your-new-website&#34;&gt;A brief explanation of your new website&lt;/h1&gt;
&lt;p&gt;Your website is fairly simple and consists of these documents.&lt;/p&gt;
&lt;h3 id=&#34;the-file-indexrmd&#34;&gt;The file &lt;code&gt;index.Rmd&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is the main landing page of your website. It always needs to be there and you fill it with the content you want on your main page. It should have opened in RStudio, if not, click on it (in the lower right &lt;code&gt;File&lt;/code&gt; section of RStudio) to open it. You will see some stuff at the top between the &lt;code&gt;---&lt;/code&gt; symbols, that&amp;rsquo;s called the YAML header and is used for formatting. In this case, we are using the &lt;code&gt;distill&lt;/code&gt; format for output. This is a type of R Markdown. If you are new to R Markdown, you can learn more about it &lt;a href=&#34;https://rmarkdown.rstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;on the R Markdown website&lt;/a&gt;. I also have a discussion of R Markdown and reproducibility &lt;a href=&#34;https://andreashandel.github.io/MADAcourse/1e_ToolsforReproducibility.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;on one of my course pages&lt;/a&gt;. You&amp;rsquo;ll find additional links to potentially useful R Markdown (and Github) resources there. Details about the &lt;code&gt;distill&lt;/code&gt; version of R Markdown are &lt;a href=&#34;https://rstudio.github.io/distill/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-file-aboutrmd&#34;&gt;The file &lt;code&gt;about.Rmd&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is another R Markdown file with so far little content.&lt;/p&gt;
&lt;h3 id=&#34;the-file-_siteyml&#34;&gt;The file &lt;code&gt;_site.yml&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This short file (called a YAML file) contains the main settings for your site that control the overall look. It also defines the structure, i.e. the menu bar at the top of your site. We&amp;rsquo;ll edit this file shortly.&lt;/p&gt;
&lt;h3 id=&#34;the-docs-folder&#34;&gt;The &lt;code&gt;docs&lt;/code&gt; folder&lt;/h3&gt;
&lt;p&gt;This folder is created and updated when you build the website. It contains the html files that are created from your &lt;code&gt;Rmd&lt;/code&gt; files. Those files will be used by Github to display your website (we&amp;rsquo;ll do that below). Note that you can change the folder name in &lt;code&gt;_site.yml&lt;/code&gt;, but I recommend leaving it as is, since &lt;code&gt;docs&lt;/code&gt; is also the default location for Github to look for these files.&lt;/p&gt;
&lt;h3 id=&#34;additional-content&#34;&gt;Additional content&lt;/h3&gt;
&lt;p&gt;There is an &lt;code&gt;.Rproj&lt;/code&gt; file that is used by RStudio to store information about your project. Later, we&amp;rsquo;ll add a few more additional files.&lt;/p&gt;
&lt;h1 id=&#34;creating-and-editing-content&#34;&gt;Creating and editing content&lt;/h1&gt;
&lt;p&gt;Making new content for your website is very easy, all you need to do is edit existing or create new R Markdown (&lt;code&gt;.Rmd&lt;/code&gt;) files. Note that if you don&amp;rsquo;t use R code in your file, you could just use plain Markdown/Md files, but I find it easier for consistency to always use Rmd files, even if they don&amp;rsquo;t contain R code.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create some content. Open the &lt;code&gt;index.Rmd&lt;/code&gt; file and write some introductory text at the bottom of the file, below the YAML header. Something like &lt;em&gt;This is my new website, it&amp;rsquo;s going to be awesome!&lt;/em&gt; or whatever you like to write.&lt;/p&gt;
&lt;p&gt;Then open the &lt;code&gt;about.Rmd&lt;/code&gt; file and also write some text, e.g. provide an introduction that describes you. if you want, add a picture, as e.g. described &lt;a href=&#34;https://rstudio.github.io/distill/figures.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, let&amp;rsquo;s create yet another file. Go to &lt;code&gt;File&lt;/code&gt;, &lt;code&gt;New File&lt;/code&gt;, &lt;code&gt;R Markdown&lt;/code&gt; choose as output format &lt;code&gt;HTML document&lt;/code&gt; and give it a title and name. Let&amp;rsquo;s call it &lt;em&gt;Projects&lt;/em&gt;. A template will open. Replace the &lt;code&gt;output: html_document&lt;/code&gt; line in the YAML with &lt;code&gt;output: distill::distill_article&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Also delete the existing content (or keep it at the bottom if you want to see how it looks when compiled). Then write some placeholder text, e.g. &lt;em&gt;This is where I will list my cool projects.&lt;/em&gt; Save this new page as &lt;code&gt;projects.Rmd&lt;/code&gt; into the main folder of your website.&lt;/p&gt;
&lt;p&gt;Another option for creating new files, which I usually use, is to go into the website folder, make a copy of an existing file and rename. E.g. copy &lt;code&gt;projects.Rmd&lt;/code&gt; to &lt;code&gt;newpage.Rmd&lt;/code&gt;, then open and edit. Either approach works.&lt;/p&gt;
&lt;p&gt;Now we need to include the new page you created into the overall site by adding it to the &lt;code&gt;navbar&lt;/code&gt; section of &lt;code&gt;_site.yml&lt;/code&gt;. Open that file, and in the &lt;code&gt;navbar&lt;/code&gt; section below the current &lt;code&gt;About&lt;/code&gt; entry, add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- text: &amp;quot;Projects&amp;quot;
href: projects.html

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Warning! YAML files or YAML headers are very picky about the exact formatting, and the number of leading empty spaces. Often, if you change something in those files and the site doesn&amp;rsquo;t compile, it means you forgot to add the required empty spaces or added more than you should. Always check that the spacing is correct.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here, make sure your new &lt;code&gt;navbar&lt;/code&gt; entries is exactly positioned like the entries above it.&lt;/p&gt;
&lt;p&gt;Once edited the &lt;code&gt;_site.yml&lt;/code&gt; file, save all your files, then rebuild the website. If things work, the preview window should show up, and you should now see the text you wrote and be able to click on your new &lt;code&gt;Projects&lt;/code&gt; entry. (You&amp;rsquo;ll find the newly created html files in the &lt;code&gt;docs&lt;/code&gt; folder.)&lt;/p&gt;
&lt;h1 id=&#34;editing-the-look&#34;&gt;Editing the look&lt;/h1&gt;
&lt;p&gt;As mentioned above &lt;code&gt;_site.yml&lt;/code&gt; controls the look. You already edited it by adding something to the navigation bar.&lt;/p&gt;
&lt;p&gt;To do major style changes, &lt;code&gt;distill&lt;/code&gt; uses CSS, which is the standard of styling for any website. At some point, you&amp;rsquo;ll likely need to mess with CSS a bit (it&amp;rsquo;s easy) to get exactly the look you want. For now, we&amp;rsquo;ll take a shortcut and get and apply a theme someone else wrote.&lt;/p&gt;
&lt;p&gt;The website of Emi Tanaka (who I do not know personally) is one of the sites featured on &lt;a href=&#34;https://jhelvy.github.io/distillery/showcase.html#emi-tanaka&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the distillery&lt;/a&gt;. Her website &lt;a href=&#34;https://emitanaka.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;is here&lt;/a&gt;. As of the time of this writing, she has a theme with different fonts and colors. The theme is controlled by a CSS file for her site. You can get it by &lt;a href=&#34;https://github.com/emitanaka/emitanaka.github.io/blob/master/assets/theme.css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;right-clicking here and doing a &amp;lsquo;save link as&amp;rsquo;&lt;/a&gt;. Save the file (which should be called &lt;code&gt;theme.css&lt;/code&gt; into the main directory of your new website.&lt;/p&gt;
&lt;p&gt;After you have done that, go to the &lt;code&gt;_site.yml&lt;/code&gt; file and add &lt;code&gt;theme: theme.css&lt;/code&gt; as a new line under the &lt;code&gt;title&lt;/code&gt; line. Save, rebuild your website, and you should see it looking differently.&lt;/p&gt;
&lt;p&gt;Since the promise was that we&amp;rsquo;ll get a website going in 30 minutes, we won&amp;rsquo;t do any more styling now üòÅ. As you start customizing your look more, you might want to start read the section &lt;a href=&#34;https://rstudio.github.io/distill/website.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Creating a Website&lt;/a&gt; section on the distill website.&lt;/p&gt;
&lt;h1 id=&#34;making-your-site-public-on-github&#34;&gt;Making your site public on GitHub.&lt;/h1&gt;
&lt;p&gt;The final step involves getting your site onto GitHub so it can be turned into a public website. 
For the following, I assume you have GitKraken up and running. If you are familiar with Git/GitHub and use your own workflow, adjust accordingly.&lt;/p&gt;
&lt;h2 id=&#34;gitkraken&#34;&gt;Gitkraken&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open GitKraken, go to &lt;code&gt;File -&amp;gt; Init Repo -&amp;gt; Local Only&lt;/code&gt;. Give it the name of your main website directory, e.g. &lt;code&gt;mywebsite&lt;/code&gt;. The &lt;code&gt;Initialize In&lt;/code&gt; folder should be the folder above where you created the website, such that the &lt;code&gt;Full path&lt;/code&gt; entry is the actual location of your website on your computer. For &lt;code&gt;.gitignore Template&lt;/code&gt; you can choose &lt;code&gt;R&lt;/code&gt;. The rest you can leave as is.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;gitkraken.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Once done, click &lt;code&gt;Create repository&lt;/code&gt;. You should see a bunch of files ready for staging on the left. Click &lt;code&gt;Stage all changes&lt;/code&gt; enter a commit message, commit. Then Click the &lt;code&gt;Push&lt;/code&gt; button.&lt;/p&gt;
&lt;p&gt;At this point, if you didn&amp;rsquo;t properly connect GitKraken and GitHub previously, you&amp;rsquo;ll likely get an error message. Follow the error message and the &lt;a href=&#34;https://www.gitkraken.com/resources/gitkraken-github-cheat-sheet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;connect Gitkraken to your Github account&lt;/a&gt; information to get it to work.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll see a message about no remote existing and if you want to add one. Say &lt;code&gt;yes&lt;/code&gt;. A menu on the left should show up. Make sure the repository name is the same as your website folder name. Then click the green button. If things worked, your local website folder has been sent to GitHub and is ready to be turned into a website.&lt;/p&gt;
&lt;h2 id=&#34;github-website&#34;&gt;Github website&lt;/h2&gt;
&lt;p&gt;For the last step, go to your account on Github.com and find the repository for the website you just created. On the bar at the top, in the right corner there should be the &lt;code&gt;Settings&lt;/code&gt; button. Click on it. Scroll down until you find the &lt;code&gt;GitHub Pages&lt;/code&gt; section. Under &lt;code&gt;Source&lt;/code&gt;, select &lt;code&gt;Main&lt;/code&gt; and then choose &lt;code&gt;/docs&lt;/code&gt; as the folder. Don&amp;rsquo;t choose a theme since we are using our own. Save those changes. If everything works (it could take a minute or so), your website is now live and public! Look right underneath the &lt;code&gt;GitHub Pages&lt;/code&gt; section, there should be something like &lt;code&gt;Your site is ready to be published at https://andreashandel.github.io/mywebsite/&lt;/code&gt;. Click on the link and your new site should show up.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That&amp;rsquo;s it. Now the hard part starts, creating good content. üòÑ&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;next-steps&#34;&gt;Next steps&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You&amp;rsquo;ll likely want to create content and change the look. See the sources listed below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You might also want to update the &lt;code&gt;Readme.md&lt;/code&gt; file which is the file people see when they land in your GitHub repository for this file. I suggest adding a link to the website.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;updating-your-site&#34;&gt;Updating your site&lt;/h1&gt;
&lt;p&gt;This process is fairly simple, you just need to remember to go through all the steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make any changes to files you want to make. Create new Rmd files in the main folder, edit them. If you include new files or rename them, don&amp;rsquo;t forget to change your &lt;code&gt;_navbar.yml&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Rebuild the website by either clicking the &lt;code&gt;Build Website&lt;/code&gt; button inside the &lt;code&gt;Build&lt;/code&gt; tab in the top right R Studio pane, or by typing &lt;code&gt;rmarkdown::render_site()&lt;/code&gt; into the console.&lt;/li&gt;
&lt;li&gt;Push your changes to GitHub.&lt;/li&gt;
&lt;li&gt;Wait a minute or so, then reload your website on Github and check that things look right.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;more-information&#34;&gt;More Information&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Since this setup is based on R Markdown, the &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Markdown book&lt;/a&gt; is very useful and contains lots of relevant information, especially &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this section&lt;/a&gt;. There is also the newer &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Markdown cookbook&lt;/a&gt; which is more of a how-to guide, while the R Markdown book is more of a full reference book. Both are very useful sources of information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;https://rstudio.github.io/distill/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;distill website&lt;/a&gt; is the obvious place for additional information on the &lt;code&gt;distill&lt;/code&gt; package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Look at the examples shown on the &lt;a href=&#34;https://jhelvy.github.io/distillery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;distillery website&lt;/a&gt;. If you see something you like, look at their GitHub repository and their code to see how they do it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In my teaching, I use the Github/R Markdown workflow. Therefore, I have some information and links on that topic. You can browse through &lt;a href=&#34;https://andreashandel.github.io/MADAcourse/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the website of this course&lt;/a&gt; and look for relevant content. The exercises teach parts of Github and making web pages (in fact, going through this tutorial is part of an exercise üòÉ.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;some-tips-tricks-and-comments&#34;&gt;Some tips, tricks and comments&lt;/h1&gt;
&lt;p&gt;Here are some thoughts and suggestions that I&amp;rsquo;ve learned by using this general setup for several online courses (previously I didn&amp;rsquo;t use the &lt;code&gt;distill&lt;/code&gt; setup, but these comments still apply).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Every time you build your website, everything gets recompiled. If you have simple content, and no/little R code, that&amp;rsquo;s ok. If you are having materials that take long to run (e.g. complex R code inside your website), I suggest to move the R code from the Rmd file to a separate R script and save results from the code into files (figures/tables/Rdata files). Then load those results into your Rmd file. This way you only need to run the time-consuming R code if those parts have changed, but on a standard website re-build the code won&amp;rsquo;t need to run. There is also a way to set up your distill website as a blog that doesn&amp;rsquo;t lead to everything being recompiled. &lt;a href=&#34;https://rstudio.github.io/distill/blog.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;See here for more&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes when I use this workflow to build websites on a Windows computer, things slow down markedly. It turns out that Windows Defender is at times not working right. If you encounter a very slow re-build process on a Windows machine, this could be the issue and you might want to check out &lt;a href=&#34;https://community.rstudio.com/t/performance-issue-rstudio-windows-10/7608&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this discussion&lt;/a&gt; and especially the provided link which explains how to potentially fix it (the fix worked for me).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can have files other than Rmd/Md in your main folder, and you can have files in sub-folders. Those are ignored by &lt;code&gt;rmarkdown&lt;/code&gt; when the site is built. Having those can be useful for storing additional materials. I generally have a &lt;code&gt;media&lt;/code&gt; folder in which I place figures and other materials, and link to it from my Rmd files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you use this setup for teaching and want to slowly release content to students (while still making edits to later parts of the course), I recommend using a &lt;em&gt;staging&lt;/em&gt; setup. A simple way to do that is to make 2 repositories, the main one for the course, and one where you do the development. Note that even if you set this to a private repository, if you turn on &lt;code&gt;Github Pages&lt;/code&gt;, students could find it. That&amp;rsquo;s usually not a big deal, nobody is looking. But you might want to be aware of it. With 2 repositories, you can do the testing/development of the course in the &lt;em&gt;staging&lt;/em&gt; repository. Once things work and whenever you want to release new content to the students, you copy it over to the main repository, build it there and push it to the main course repo. Alternatively, you can do development in the main repository, as long as you don&amp;rsquo;t make the files visible in the &lt;code&gt;navbar&lt;/code&gt; section, students won&amp;rsquo;t easily see them. Of course the files can be found through a direct link or through browsing the Github repository, so don&amp;rsquo;t place anything in there (e.g. if you use this four a course, keep the solutions to your homework problems offline until after the deadline üòÑ).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s easy to have broken links when creating any website and it&amp;rsquo;s good to check that things are ok. There are simple free tools out there that let you check to make sure links are not broken. I like using &lt;a href=&#34;https://www.drlinkcheck.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dr Link Check&lt;/a&gt; or the &lt;a href=&#34;https://validator.w3.org/checklink&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;W3C Link Checker&lt;/a&gt;. I&amp;rsquo;m sure many others exist.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Creating a website in less than 1 hour - part 1</title>
      <link>https://www.andreashandel.com/posts/blogdown-website-1/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://www.andreashandel.com/posts/blogdown-website-1/</guid>
      <description>&lt;p&gt;&lt;em&gt;Update 2021-03-01: Hugo and the Academic (now Wowchemy) theme keep changing rapidly. Since I originally posted this, things changed. I tried to update things to reflect some of the changes. If you find things not working, let me know so I can update.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The following are step-by-step instructions for creating your own website using &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blogdown&lt;/a&gt;, &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt; and &lt;a href=&#34;https://www.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netlify&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://www.andreashandel.com/posts/blogdown-website-2/&#34;&gt;part 2&lt;/a&gt;, you will learn how to add &lt;a href=&#34;https://GitHub.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; to your workflow to make things even more automated and efficient.&lt;/p&gt;
&lt;h1 id=&#34;required-skills&#34;&gt;Required skills&lt;/h1&gt;
&lt;p&gt;I assume that you have general computer literacy, but no experience with any of the tools that will be used. Also, no coding, web-development or related experience is expected.&lt;/p&gt;
&lt;h1 id=&#34;what-this-document-covers&#34;&gt;What this document covers&lt;/h1&gt;
&lt;p&gt;This document is meant to provide you with the minimum required instructions to get your own website up and running quickly. As such, instructions and background information are kept at a minimum. I used a &lt;em&gt;recipe-like&lt;/em&gt; approach by giving hopefully detailed and specific enough instructions to get things to work. I&amp;rsquo;m not covering any &lt;em&gt;why&lt;/em&gt; here or provide much further explanations. If you decide you like to use this setup for your website, you will likely want to go beyond this document and learn a bit more about the various tools involved in the process. To that end, links to further resources are provided. Those resources also discuss a bit why you would want this setup versus something like e.g. Wordpress.&lt;/p&gt;
&lt;h1 id=&#34;who-this-is-not-for&#34;&gt;Who this is (not) for&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;This way of making and hosting a website might be for you if:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are (or would like to be) an R, RMarkdown and GitHub user. This is a method of creating a website using those tools which very efficiently fits into such a workflow.&lt;/li&gt;
&lt;li&gt;You want a way to host a website where all the content is fully controlled by you, and the website can be hosted without much resources (and for free).&lt;/li&gt;
&lt;li&gt;You are curious about R/RMarkdown/GitHub, how to use it to build a website, and you&amp;rsquo;ve got a bit of time to spare and want to give it a try.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;This way of making and hosting a website might not be for you if:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your main workflow is MS Word, Powerpoint, etc. and you are not interested in R/Markdown/GitHub.&lt;/li&gt;
&lt;li&gt;You want everything accessible through a graphical interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;motivating-examples&#34;&gt;Motivating Examples&lt;/h1&gt;
&lt;p&gt;If you want to see a few nice examples of websites written with blogdown/Hugo, check these out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alison.rbind.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Allison Hill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://amber.rbind.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amber Thomas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://malco.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Malcolm Barrett&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://theory.ucr.edu/flip/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flip Tanedo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many more examples of blogdown/Hugo websites are out there. See e.g. &lt;a href=&#34;https://awesome-blogdown.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pointers to more resources and alternative tutorials (should you not like this one) can be found at the bottom of this post.&lt;/p&gt;
&lt;h1 id=&#34;quick-tool-overview&#34;&gt;Quick tool overview&lt;/h1&gt;
&lt;p&gt;A few different software tools are working together for this website built. &lt;strong&gt;In most cases, they play nicely together and you don&amp;rsquo;t need to worry about details!&lt;/strong&gt; But it is still good to know the names of the different components.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.r-project.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://rstudio.com/products/rstudio/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio&lt;/a&gt;&lt;/strong&gt; we won&amp;rsquo;t really use those for their normal purpose as statistics/coding software/platform, but since blogdown is part of the RMarkdown family of packages, we need to use R and RStudio to access blogdown.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blogdown&lt;/a&gt;&lt;/strong&gt; is an R package that interfaces with Hugo and allows you to create websites easily using RMarkdown syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt;&lt;/strong&gt; is software that operates in the background. It takes all the content you create for your website (your text, your pictures, etc.), applies layout to your site based on a chosen theme, and turns everything into files that can be placed on Netlify and read by anyone&amp;rsquo;s web browser. You will likely not have to think or learn much about Hugo, at least not initially.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netlify&lt;/a&gt;&lt;/strong&gt; is the service we&amp;rsquo;ll use to host the website. It offers a free plan, which is great for a starter website (you can always upgrade once you become famous and everyone visits your website. 
Netlify is very easy to set up and use, and it can automatically pull information from GitHub to build your site every time you update it (see part 2 for this).&lt;/p&gt;
&lt;p&gt;While Netlify and RStudio have paid options, for our purpose we can use their free versions. Hugo, blogdown and R are completely free.&lt;/p&gt;
&lt;h1 id=&#34;pre-requisites&#34;&gt;Pre-requisites&lt;/h1&gt;
&lt;p&gt;First, you need to set up accounts and install some software for the tools we will be using.&lt;/p&gt;
&lt;h2 id=&#34;get-a-netlify-account&#34;&gt;Get a Netlify account&lt;/h2&gt;
&lt;p&gt;Go to &lt;a href=&#34;https://www.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the Netlify website&lt;/a&gt; and sign up for an account. Follow the sign-up steps to set up your account.&lt;/p&gt;
&lt;h2 id=&#34;install-r-and-rstudio&#34;&gt;Install R and RStudio&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t already have it on your computer, &lt;a href=&#34;https://www.r-project.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;install R first&lt;/a&gt;. You can pick any mirror you like. If you already have R installed, make sure it is a fairly recent version. If yours is old, I suggest you update (install a new R version).&lt;/p&gt;
&lt;p&gt;Once you have R installed, install the free version of &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Desktop&lt;/a&gt;. Again, make sure it&amp;rsquo;s a recent version. If you have an older version of RStudio, you should update.&lt;/p&gt;
&lt;p&gt;Installing R and RStudio should be fairly straightforward. If you want some more details or need instructions, see &lt;a href=&#34;https://andreashandel.GitHub.io/MADAcourse/1c_RandRStudio.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this page&lt;/a&gt; (which is part of an online course I teach).&lt;/p&gt;
&lt;h1 id=&#34;starting-your-website&#34;&gt;Starting your website&lt;/h1&gt;
&lt;p&gt;With the above registration and installation bits out of the way, you can get started with your website. To do so, follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open RStudio. Install the blogdown package by typing &lt;code&gt;install.packages(&#39;blogdown&#39;)&lt;/code&gt; in the R console (the lower left window in RStudio). Note that all &lt;code&gt;R&lt;/code&gt; commands are case sensitive. You need to be online for this to work. You should see &lt;code&gt;blogdown&lt;/code&gt; and several other packages being installed. You only need to do this step once, unless you upgrade R or change computers. If for some reason you already had &lt;code&gt;blogdown&lt;/code&gt; installed, make sure it&amp;rsquo;s current and if needed, update it to the latest version. You can update this (and all) R packages by clicking on the &lt;code&gt;Packages&lt;/code&gt; tab in the bottom right window of RStudio, then &lt;code&gt;Update&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Load &lt;code&gt;blogdown&lt;/code&gt; by typing &lt;code&gt;library(blogdown)&lt;/code&gt; into the R console (you need to do this every time you open/re-load R/RStudio).&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;File&lt;/code&gt;, choose &lt;code&gt;New Project&lt;/code&gt;, &lt;code&gt;New Directory&lt;/code&gt;, &lt;code&gt;Website using blogdown&lt;/code&gt;. On the following screen, specify a meaningful directory name (e.g. YOURNAMEWEBSITE), place it somewhere on your computer, check all boxes. In the Hugo theme box, enter &lt;code&gt;wowchemy/starter-academic&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The figure below shows the screen and choices you should make. Adjust for your own setup.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;startwebsite.png&#34; width=&#34;80%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now click &lt;code&gt;Create Project&lt;/code&gt;. This creates a new website and installs and sets up the chosen theme, complete with a small sample site. Be patient, it might take some time. As long as you see a little red stop sign in the top left corner of the R Console window, you know things are still running. Once everything is done, you will see a lot of new files have shown up in your project/repository folder.&lt;/p&gt;
&lt;p&gt;The command above installed a small example website. We can build the site and look at it. First, make sure &lt;code&gt;blogdown&lt;/code&gt; has been loaded with &lt;code&gt;library(blogdown)&lt;/code&gt;. The build the site by typing &lt;code&gt;build_site()&lt;/code&gt; into the R console. Follow that with &lt;code&gt;serve_site()&lt;/code&gt; to see a live preview of the site. If everything works, the bottom right window, which is the RStudio viewer, shows your new website.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;servesite.png&#34; width=&#34;80%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click on the symbol next to the broom in the top left corner of that window to see the website in your browser. This is your new site. Now it&amp;rsquo;s time to customize and create content.&lt;/p&gt;
&lt;h1 id=&#34;a-word-about-themes&#34;&gt;A word about themes&lt;/h1&gt;
&lt;p&gt;Pretty much all modern websites follow the concept of splitting content from layout and only merging them at some point in the process of building a website. The formatting that gives a site a specific layout is often called a &lt;strong&gt;theme&lt;/strong&gt;. The theme determines the look of your website. Hugo has a lot and quickly growing &lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;number of themes&lt;/a&gt; (though not as many as Wordpress). The idea is that you can switch themes and thus layout without too much difficulty. In practice, there is still often a good bit of adjustment needed when you go from one theme to another. Thus, it is worth spending some time deciding on a theme before you go &amp;ldquo;all in&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The default theme &lt;code&gt;hugo-lithium&lt;/code&gt; is a rather basic one. I don&amp;rsquo;t actually know too many websites that use it. A popular theme is &lt;a href=&#34;https://wowchemy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wowchemy&lt;/a&gt; (formerly called &lt;em&gt;Academic&lt;/em&gt;). I use it for both my personal and research group sites. I&amp;rsquo;m using it for this tutorial too. The &lt;code&gt;Wowchemy&lt;/code&gt; theme has a lot of features and customization options. But it has downsides. First, it is fairly complex. Second, it is currently changing rapidly, and those changes often break things. I hope that when you read this, it works. If not, let me know. 
There are other promising themes in the works, such as &lt;a href=&#34;https://github.com/yihui/hugo-prose&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo Prose&lt;/a&gt; and &lt;a href=&#34;https://github.com/hugo-apero/hugo-apero&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo Apero&lt;/a&gt;, made by the same folks who are involved with the &lt;code&gt;blogdown&lt;/code&gt; development. I wouldn&amp;rsquo;t be surprised if in the future a lot of folks, including myself, will switch to one of those themes.&lt;/p&gt;
&lt;h1 id=&#34;a-brief-explanation-of-your-new-website&#34;&gt;A brief explanation of your new website&lt;/h1&gt;
&lt;p&gt;The previous steps have given you a website with some example starter content. Any complex website has a certain structure consisting of folders and files. These files and folders either live only on a website server and you never see them (e.g. &lt;a href=&#34;https://wordpress.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wordpress&lt;/a&gt;), or they exist locally, as is the case for &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt; (and similar such website generators, e.g. &lt;a href=&#34;https://jekyllrb.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jekyll&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Some of the files and folders you do not need to care much about, others you will need to interact with. To get a bit of an idea what lives where, here is a quick overview. Some of this depends on the Hugo theme you are using, but most of them have a rather similar structure. Open the directory where you placed your website, either through the &lt;code&gt;Files&lt;/code&gt; pane in RStudio, or by using File Explorer (or whatever that is called on a Mac\Linux üòÉ).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The folder &lt;code&gt;config&lt;/code&gt; contains files that control some of the overall website look and feel. We&amp;rsquo;ll visit them later. In Hugo, those files that control configuration are called either &lt;code&gt;TOML&lt;/code&gt; or &lt;code&gt;YAML&lt;/code&gt; files. The current trend for &lt;em&gt;Hugo&lt;/em&gt; is to switch everything to YAML, but you&amp;rsquo;ll keep seeing a mix for a while. Many files have bits of TOML/YAML and other content in them, as you will see below.&lt;/li&gt;
&lt;li&gt;The folder &lt;code&gt;content&lt;/code&gt; and its subfolders contain almost all the actual content for your website. We&amp;rsquo;ll edit some of that soon.&lt;/li&gt;
&lt;li&gt;The folder &lt;code&gt;public&lt;/code&gt; is the one that contains your finished website once Hugo has processed your content and applied the layout from your chosen theme. That folder is the one which you will place online e.g. on Netlify.&lt;/li&gt;
&lt;li&gt;The folder &lt;code&gt;static&lt;/code&gt; contains subfolders where you can store images and other media (e.g. pdf files or video/audio, etc) that you want to be part of your site.&lt;/li&gt;
&lt;li&gt;The folder &lt;code&gt;themes&lt;/code&gt; includes the different Hugo themes you installed. You can have several themes installed and switch between them. Note however that themes differ in their details of how they do things, so it is a good idea to check out a few themes first, then settle on one and build your website &lt;em&gt;for real&lt;/em&gt; once you picked one.&lt;/li&gt;
&lt;li&gt;The other folders that might exist are ones you don&amp;rsquo;t need to worry about, at least not initially. Some of those folders can contain your own formatting and layout choices overwriting the main theme. We won&amp;rsquo;t discuss them here but once you really want to start configuring your site, those will become important.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;editing-content&#34;&gt;Editing content&lt;/h1&gt;
&lt;p&gt;Now that you know a little bit how your website is structured, let&amp;rsquo;s dig in and add and modify it. We&amp;rsquo;ll start with some modifications, followed by creating new content.&lt;/p&gt;
&lt;h2 id=&#34;playing-with-widgets&#34;&gt;Playing with widgets&lt;/h2&gt;
&lt;p&gt;All (or at least most) content goes into the &lt;code&gt;content&lt;/code&gt; folder and its subfolders. Content is generally written in (R)Markdown. For this tutorial, you don&amp;rsquo;t need to know much Rmarkdown, but at some point you will have to learn it. Fortunately, (R)Markdown is very easy to learn. See e.g. the RMarkdown section on &lt;a href=&#34;https://andreashandel.github.io/MADAcourse/1e_ToolsforReproducibility.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this page&lt;/a&gt;, check out &lt;a href=&#34;https://www.markdowntutorial.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this nice interactive tutorial&lt;/a&gt; or this &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cheatsheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Wowchemy/Academic theme, and many other modern websites, use a layout that employs &lt;strong&gt;widgets&lt;/strong&gt;, which are components of a website that are individually formatted and styled. On the demo site you just created, you see many different sections, each is a widget. Which widgets you want is controlled by files in the &lt;code&gt;/content/home/&lt;/code&gt; folder. Go into that folder (from within RStudio) and open the &lt;code&gt;demo.md&lt;/code&gt; file. You will see a bunch of text. Some commands are between &lt;code&gt;+++&lt;/code&gt; signs, this is called the TOML (or YAML if it&amp;rsquo;s 3 &lt;code&gt;---&lt;/code&gt;) header. These are instructions for the layout. The text below is what is actually shown on the site.&lt;/p&gt;
&lt;p&gt;As you stare at the content of the file, you might recognize that it corresponds to the 2nd block of the demo website with the dark bubble content. Let&amp;rsquo;s say you don&amp;rsquo;t want this particular widget on your home page. The easiest way is to set &lt;code&gt;active = false&lt;/code&gt;. (You can also delete the whole file if you are sure you don&amp;rsquo;t want it). Do that. You should notice 2 things. In the bottom-left RStudio window (the R console) you should see a bit of code showing that the website was re-built and updated in real time. If you re-load the page in your browser, the widget and its content should be gone. You can try turning off other sections of the main page using this approach.&lt;/p&gt;
&lt;h2 id=&#34;making-things-personal&#34;&gt;Making things personal&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s open the &lt;code&gt;about.md&lt;/code&gt; file. You will notice that it doesn&amp;rsquo;t really contain any content. Instead, it pulls the content from another location, namely content in the &lt;code&gt;authors&lt;/code&gt; folder. Go into &lt;code&gt;/content/authors/admin/&lt;/code&gt; and open the &lt;code&gt;_index.md&lt;/code&gt; file. There you see the content that is displayed on the main page. Modify it with your personal information. Once you save your changes, you should see the website automatically being rebuilt. If you have, add a picture of yourself and replace the current &lt;code&gt;avatar.jpg&lt;/code&gt; file. (Your picture needs to have that name). Also, while not required, you might want to rename the folder from &lt;code&gt;admin&lt;/code&gt; to your name. Make sure this corresponds to the name you list in the &lt;code&gt;_index.md&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&#34;cleaning-up-for-now&#34;&gt;Cleaning up for now&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s turn off all other parts of the main site apart from the &lt;code&gt;about&lt;/code&gt; widget. The easiest way is to remove all files apart from the &lt;code&gt;index.md&lt;/code&gt; and &lt;code&gt;about.md&lt;/code&gt; files. You probably don&amp;rsquo;t want to completely delete them (since you might want to use them later), thus I recommend you move them to some other folder on your computer. For instance you can make a folder called &lt;code&gt;myfiles&lt;/code&gt; as a subfolder of your website folder and move the files into that folder.&lt;/p&gt;
&lt;p&gt;If all of this worked, there should be a main page containing only a brief description of yourself.&lt;/p&gt;
&lt;h2 id=&#34;a-word-on-error-messages&#34;&gt;A word on error messages.&lt;/h2&gt;
&lt;p&gt;If you make some changes that break the site, you will see an error message in the R console and the site won&amp;rsquo;t re-compile until you fix the problem. You often have to be careful to write things exactly as specified, and often with the right indentation, etc. Some fiddling is at times required. If you are stuck and think you broke it too badly, you can either look in the &lt;a href=&#34;https://wowchemy.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wowchemy theme documentation&lt;/a&gt; or go into the &lt;code&gt;themes/starter-academic/exampleSite&lt;/code&gt; folder and find the corresponding file you are editing there and see how it needs to look.&lt;/p&gt;
&lt;h1 id=&#34;editing-settings&#34;&gt;Editing settings&lt;/h1&gt;
&lt;h2 id=&#34;configyaml&#34;&gt;config.yaml&lt;/h2&gt;
&lt;p&gt;I mentioned above that TOML/YAML is a language/structure used by Hugo to control all kinds of things. Most files have some TOML/YAML part, a few files are nothing but TOML and control a lot of settings. Let&amp;rsquo;s look at the most important files. The first one is &lt;code&gt;config.yaml&lt;/code&gt; (sometimes also called &lt;code&gt;config.toml&lt;/code&gt;) located in the main website folder. Find and open it. You will see that it lists as title &lt;em&gt;Academic&lt;/em&gt;. Change that to e.g. &lt;em&gt;Website of YOURNAME&lt;/em&gt;. You will see this change show up on the main site. You can try what happens if you write something in the &lt;code&gt;copyright&lt;/code&gt; section. The rest of this file doesn&amp;rsquo;t need further editing for now.&lt;/p&gt;
&lt;h2 id=&#34;menustoml&#34;&gt;menus.toml&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s go into the &lt;code&gt;config/_default/&lt;/code&gt; folder and open the &lt;code&gt;menus.toml&lt;/code&gt; file. You&amp;rsquo;ll see that those correspond to the menu buttons on the main page. Most of them don&amp;rsquo;t work since we removed the widgets. For now, let&amp;rsquo;s go ahead and disable (by placing &lt;code&gt;#&lt;/code&gt; symbols in front) all entries apart from the &lt;code&gt;Posts&lt;/code&gt; block of text.&lt;/p&gt;
&lt;h2 id=&#34;paramstoml&#34;&gt;params.toml&lt;/h2&gt;
&lt;p&gt;Open &lt;code&gt;params.toml&lt;/code&gt;. This file lets you specify and control a lot of things. Try setting a different theme. Then read through the other parts. We won&amp;rsquo;t change them for now, but you might want to come back to them.&lt;/p&gt;
&lt;h1 id=&#34;create-new-content&#34;&gt;Create new content&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s create a blog post. First, let&amp;rsquo;s move the &lt;code&gt;posts.md&lt;/code&gt; file back into the &lt;code&gt;home&lt;/code&gt; folder. If successful, you should see several blog posts show up on the site. The actual files containing those posts are in the &lt;code&gt;content/post&lt;/code&gt; folder. (Academic is unfortunately not very good about consistently using singular or plural). You will see one file (both &lt;code&gt;.Rmd&lt;/code&gt; and &lt;code&gt;.html&lt;/code&gt;) in the main &lt;code&gt;/post&lt;/code&gt; folder. That file was placed there by RStudio/blogdown. You will also see several folders, each contain a &lt;code&gt;.md&lt;/code&gt; file and one or more images. Those are placed there by the creator of Academic. Both ways of placing blog posts is ok but separate folders tends to be more organized. Let&amp;rsquo;s first remove the existing posts. You can either delete them, or to be safe, move everything (apart from the &lt;code&gt;_index.md&lt;/code&gt; file) to the folder you created earlier. You should see all posts disappear from the main page.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s create our first blog post. We can use an RStudio addin for this. Since I have found that sometimes the &lt;code&gt;serve_site()&lt;/code&gt; command interferes with the addin functionality, let&amp;rsquo;s stop the serving (continuous building and displaying) of the website for now by restarting &lt;code&gt;R&lt;/code&gt; (under &lt;code&gt;Session&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Once you have restarted &lt;code&gt;R&lt;/code&gt;, go to the &lt;code&gt;Addins&lt;/code&gt; button (approximately under the &lt;code&gt;Tools&lt;/code&gt; button) and choose &lt;code&gt;New Post&lt;/code&gt;. Add a title for your blog post. You can leave all other settings as they are. At some point you will want to think more about the way you want to set up your website, including what kind of file format you want. See the &lt;em&gt;More Information&lt;/em&gt; section below. For now, just give it a title and use the defaults for the rest.&lt;/p&gt;
&lt;p&gt;Once you click &lt;code&gt;done&lt;/code&gt;, the file should open. You will see that the things you specified in the boxes show up in the YANL area. Write some text below that area (below the &lt;code&gt;---&lt;/code&gt;). The text you write should be formatted as (R)Markdown. For now, you can just write some plain text. Or try some Markdown formatting using the cheat sheet listed above.&lt;/p&gt;
&lt;p&gt;Once you finished writing your new blog post, save your changes, then start the server again by re-loading the blogdown package (&lt;code&gt;library(blogdown)&lt;/code&gt;), then type &lt;code&gt;serve_site()&lt;/code&gt; into the &lt;code&gt;R&lt;/code&gt; console.&lt;/p&gt;
&lt;h2 id=&#34;more-edits&#34;&gt;More edits&lt;/h2&gt;
&lt;p&gt;Congratulations, you have built a website and wrote a blog post! Of course there is a lot you can do next. Write more posts, look at all the different elements/widgets you can turn on and modify, etc. As mentioned, the Academic theme has a lot of features. If you like what you see, continue exploring. If you think you want something simpler, check out other Hugo themes until you find one you like, then customize it. A lot of things are very similar across all Hugo themes (e.g. the TOML/YAML bits and the folder structure), but some details differ, so it&amp;rsquo;s good to pick a theme before you really start customizing it.&lt;/p&gt;
&lt;p&gt;But for now, we&amp;rsquo;ll leave it at this. There is one more crucial step missing though.&lt;/p&gt;
&lt;h1 id=&#34;making-your-website-public&#34;&gt;Making your website public&lt;/h1&gt;
&lt;p&gt;So far, everything happened on your local computer. In a final step, we want to put the website online so everyone can see it. With Netlify, this is fairly simple. Log into your Netlify account. Under &lt;code&gt;Sites&lt;/code&gt;, you should see a white box that says &amp;ldquo;drag and drop your site folder here&amp;rdquo;. Take the folder named &lt;code&gt;public&lt;/code&gt; inside your website folder and drag it into that box. If things work right, after a few seconds you should see that your site is deployed. It will have a weird name and a URL (mine when I tried it just now was called &lt;code&gt;https://cranky-lamport-fff53a.netlify.com/&lt;/code&gt;). Click on it and you will see your new website publicly online for everyone to see!&lt;/p&gt;
&lt;p&gt;If you want, you can change the name of your site under &lt;code&gt;Site settings&lt;/code&gt;. More advanced (not free but also not too expensive and not that hard) is to get your domain name, e.g. &lt;code&gt;www.yourname.com&lt;/code&gt; or something like that.&lt;/p&gt;
&lt;p&gt;If you want to add GitHub to the mix and have the deployment of your website automated, move on to &lt;a href=&#34;https://www.andreashandel.com/posts/blogdown-website-2/&#34;&gt;part 2&lt;/a&gt; of this post.&lt;/p&gt;
&lt;h1 id=&#34;more-information&#34;&gt;More Information&lt;/h1&gt;
&lt;p&gt;This post is just to get you up and running. If you like what you see and want to keep using blogdown/Hugo, you&amp;rsquo;ll likely need to learn more. There is a lot of good information on blogdown/Hugo/Academic available. I recommend the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A short introductory course is Alison Hill&amp;rsquo;s &lt;a href=&#34;https://alison.rbind.io/project/summer-of-blogdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;summer of blogdown&lt;/a&gt;. Alison also has several blog posts on her website discussing more advanced concepts of Hugo. A &lt;a href=&#34;https://alison.rbind.io/post/new-year-new-blogdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;recent post from her&lt;/a&gt; is very helpful and covers similar ground to what I&amp;rsquo;m describing, though in a somewhat different order.&lt;/li&gt;
&lt;li&gt;A lot of details and further information can be found in &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the blogdown book&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For the Wowchemy theme, check out &lt;a href=&#34;https://wowchemy.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the docs for the theme&lt;/a&gt;. While they could be improved and at times a bit confusing, they are still a good source of information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further information and tutorials can easily be found with some online searching. Let me know if you find any especially helpful ones and I&amp;rsquo;ll add them here.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
